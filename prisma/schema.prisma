generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  comments      Comment[]
  likes         Like[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Institution {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  country  String
  state    String
  city     String
  courses  Course[]
  tests    Test[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  institution  Institution  @relation(fields: [institutionId], references: [id])
  institutionId String      @db.ObjectId
  disciplines  Discipline[]
  tests        Test[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Discipline {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  tests     Test[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  institution Institution @relation(fields: [institutionId], references: [id])
  institutionId String   @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @db.ObjectId
  discipline  Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId String   @db.ObjectId
  class       String
  periodType  PeriodType
  periodNumber Int
  year        Int
  imageUrl    String
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  test      Test     @relation(fields: [testId], references: [id])
  testId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  test      Test     @relation(fields: [testId], references: [id])
  testId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([authorId, testId])
}

enum PeriodType {
  SEMESTER
  YEAR
  QUARTER
}